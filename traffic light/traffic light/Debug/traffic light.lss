
traffic light.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         0000019c  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         0000000a  00800060  0000019c  00000210  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .comment      00000030  00000000  00000000  0000021a  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  0000024c  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000020  00000000  00000000  00000288  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   0000070a  00000000  00000000  000002a8  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 000005b8  00000000  00000000  000009b2  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000336  00000000  00000000  00000f6a  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000034  00000000  00000000  000012a0  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000311  00000000  00000000  000012d4  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    000001a3  00000000  00000000  000015e5  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000010  00000000  00000000  00001788  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
   8:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
   c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  10:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  14:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  18:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  1c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  20:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  24:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  28:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  2c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  30:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  34:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  38:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  3c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  40:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  44:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  48:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  4c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  50:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	ec e9       	ldi	r30, 0x9C	; 156
  68:	f1 e0       	ldi	r31, 0x01	; 1
  6a:	02 c0       	rjmp	.+4      	; 0x70 <__do_copy_data+0x10>
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0
  70:	aa 36       	cpi	r26, 0x6A	; 106
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <__do_copy_data+0xc>
  76:	0e 94 41 00 	call	0x82	; 0x82 <main>
  7a:	0c 94 cc 00 	jmp	0x198	; 0x198 <_exit>

0000007e <__bad_interrupt>:
  7e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000082 <main>:
#include <avr/io.h>
#include <avr/delay.h>
typedef unsigned char u8;

int main(void)
{
  82:	cf 93       	push	r28
  84:	df 93       	push	r29
  86:	cd b7       	in	r28, 0x3d	; 61
  88:	de b7       	in	r29, 0x3e	; 62
  8a:	2a 97       	sbiw	r28, 0x0a	; 10
  8c:	0f b6       	in	r0, 0x3f	; 63
  8e:	f8 94       	cli
  90:	de bf       	out	0x3e, r29	; 62
  92:	0f be       	out	0x3f, r0	; 63
  94:	cd bf       	out	0x3d, r28	; 61
 DDRA=0b11111111;
  96:	8f ef       	ldi	r24, 0xFF	; 255
  98:	8a bb       	out	0x1a, r24	; 26
 DDRB=0b11111111;
  9a:	87 bb       	out	0x17, r24	; 23
 DDRC=0b11111111;
  9c:	84 bb       	out	0x14, r24	; 20
 u8 numbers[10]={0b00111111,0b00000110,0b01011011,0b01001111,0b01100110,0b01101101,0b01111101,0b00000111,0b01111111,0b01101111};
  9e:	8a e0       	ldi	r24, 0x0A	; 10
  a0:	e0 e6       	ldi	r30, 0x60	; 96
  a2:	f0 e0       	ldi	r31, 0x00	; 0
  a4:	de 01       	movw	r26, r28
  a6:	11 96       	adiw	r26, 0x01	; 1
  a8:	01 90       	ld	r0, Z+
  aa:	0d 92       	st	X+, r0
  ac:	8a 95       	dec	r24
  ae:	e1 f7       	brne	.-8      	; 0xa8 <main+0x26>
    /* Replace with your application code */
    while (1) 
	
    {   
		for(int j=3;j>=0;j--){
  b0:	43 e0       	ldi	r20, 0x03	; 3
  b2:	50 e0       	ldi	r21, 0x00	; 0
  b4:	28 c0       	rjmp	.+80     	; 0x106 <main+0x84>
		PORTC=0b00000001;
  b6:	81 e0       	ldi	r24, 0x01	; 1
  b8:	85 bb       	out	0x15, r24	; 21
		PORTA=numbers[j];
  ba:	e1 e0       	ldi	r30, 0x01	; 1
  bc:	f0 e0       	ldi	r31, 0x00	; 0
  be:	ec 0f       	add	r30, r28
  c0:	fd 1f       	adc	r31, r29
  c2:	e4 0f       	add	r30, r20
  c4:	f5 1f       	adc	r31, r21
  c6:	80 81       	ld	r24, Z
  c8:	8b bb       	out	0x1b, r24	; 27
		for (int i=9;i>=0;i--)
  ca:	89 e0       	ldi	r24, 0x09	; 9
  cc:	90 e0       	ldi	r25, 0x00	; 0
  ce:	17 c0       	rjmp	.+46     	; 0xfe <main+0x7c>
		{    if (j==3){
  d0:	43 30       	cpi	r20, 0x03	; 3
  d2:	51 05       	cpc	r21, r1
  d4:	11 f4       	brne	.+4      	; 0xda <main+0x58>
			i=0;
  d6:	80 e0       	ldi	r24, 0x00	; 0
  d8:	90 e0       	ldi	r25, 0x00	; 0
		}
			PORTB=numbers[i];
  da:	e1 e0       	ldi	r30, 0x01	; 1
  dc:	f0 e0       	ldi	r31, 0x00	; 0
  de:	ec 0f       	add	r30, r28
  e0:	fd 1f       	adc	r31, r29
  e2:	e8 0f       	add	r30, r24
  e4:	f9 1f       	adc	r31, r25
  e6:	20 81       	ld	r18, Z
  e8:	28 bb       	out	0x18, r18	; 24
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  ea:	2f e9       	ldi	r18, 0x9F	; 159
  ec:	36 e8       	ldi	r19, 0x86	; 134
  ee:	61 e0       	ldi	r22, 0x01	; 1
  f0:	21 50       	subi	r18, 0x01	; 1
  f2:	30 40       	sbci	r19, 0x00	; 0
  f4:	60 40       	sbci	r22, 0x00	; 0
  f6:	e1 f7       	brne	.-8      	; 0xf0 <main+0x6e>
  f8:	00 c0       	rjmp	.+0      	; 0xfa <main+0x78>
  fa:	00 00       	nop
	
    {   
		for(int j=3;j>=0;j--){
		PORTC=0b00000001;
		PORTA=numbers[j];
		for (int i=9;i>=0;i--)
  fc:	01 97       	sbiw	r24, 0x01	; 1
  fe:	99 23       	and	r25, r25
 100:	3c f7       	brge	.-50     	; 0xd0 <main+0x4e>
 u8 numbers[10]={0b00111111,0b00000110,0b01011011,0b01001111,0b01100110,0b01101101,0b01111101,0b00000111,0b01111111,0b01101111};
    /* Replace with your application code */
    while (1) 
	
    {   
		for(int j=3;j>=0;j--){
 102:	41 50       	subi	r20, 0x01	; 1
 104:	51 09       	sbc	r21, r1
 106:	55 23       	and	r21, r21
 108:	b4 f6       	brge	.-84     	; 0xb6 <main+0x34>
 10a:	85 e0       	ldi	r24, 0x05	; 5
 10c:	90 e0       	ldi	r25, 0x00	; 0
 10e:	14 c0       	rjmp	.+40     	; 0x138 <main+0xb6>
			_delay_ms(500);
		}
    }
	for (int i=5;i>=0;i--)
	{   	
	PORTC=0b00000010;
 110:	22 e0       	ldi	r18, 0x02	; 2
 112:	25 bb       	out	0x15, r18	; 21
	PORTB=numbers[i];
 114:	e1 e0       	ldi	r30, 0x01	; 1
 116:	f0 e0       	ldi	r31, 0x00	; 0
 118:	ec 0f       	add	r30, r28
 11a:	fd 1f       	adc	r31, r29
 11c:	e8 0f       	add	r30, r24
 11e:	f9 1f       	adc	r31, r25
 120:	20 81       	ld	r18, Z
 122:	28 bb       	out	0x18, r18	; 24
 124:	2f e9       	ldi	r18, 0x9F	; 159
 126:	36 e8       	ldi	r19, 0x86	; 134
 128:	41 e0       	ldi	r20, 0x01	; 1
 12a:	21 50       	subi	r18, 0x01	; 1
 12c:	30 40       	sbci	r19, 0x00	; 0
 12e:	40 40       	sbci	r20, 0x00	; 0
 130:	e1 f7       	brne	.-8      	; 0x12a <main+0xa8>
 132:	00 c0       	rjmp	.+0      	; 0x134 <main+0xb2>
 134:	00 00       	nop
		}
			PORTB=numbers[i];
			_delay_ms(500);
		}
    }
	for (int i=5;i>=0;i--)
 136:	01 97       	sbiw	r24, 0x01	; 1
 138:	99 23       	and	r25, r25
 13a:	54 f7       	brge	.-44     	; 0x110 <main+0x8e>
 13c:	43 e0       	ldi	r20, 0x03	; 3
 13e:	50 e0       	ldi	r21, 0x00	; 0
 140:	28 c0       	rjmp	.+80     	; 0x192 <main+0x110>
	PORTC=0b00000010;
	PORTB=numbers[i];
	_delay_ms(500);	
}
for(int j=3;j>=0;j--){
	PORTC=0b00000100;
 142:	84 e0       	ldi	r24, 0x04	; 4
 144:	85 bb       	out	0x15, r24	; 21
	PORTA=numbers[j];
 146:	e1 e0       	ldi	r30, 0x01	; 1
 148:	f0 e0       	ldi	r31, 0x00	; 0
 14a:	ec 0f       	add	r30, r28
 14c:	fd 1f       	adc	r31, r29
 14e:	e4 0f       	add	r30, r20
 150:	f5 1f       	adc	r31, r21
 152:	80 81       	ld	r24, Z
 154:	8b bb       	out	0x1b, r24	; 27
	for (int i=9;i>=0;i--)
 156:	89 e0       	ldi	r24, 0x09	; 9
 158:	90 e0       	ldi	r25, 0x00	; 0
 15a:	17 c0       	rjmp	.+46     	; 0x18a <main+0x108>
	{    if (j==3){
 15c:	43 30       	cpi	r20, 0x03	; 3
 15e:	51 05       	cpc	r21, r1
 160:	11 f4       	brne	.+4      	; 0x166 <main+0xe4>
		i=0;
 162:	80 e0       	ldi	r24, 0x00	; 0
 164:	90 e0       	ldi	r25, 0x00	; 0
	}
	PORTB=numbers[i];
 166:	e1 e0       	ldi	r30, 0x01	; 1
 168:	f0 e0       	ldi	r31, 0x00	; 0
 16a:	ec 0f       	add	r30, r28
 16c:	fd 1f       	adc	r31, r29
 16e:	e8 0f       	add	r30, r24
 170:	f9 1f       	adc	r31, r25
 172:	20 81       	ld	r18, Z
 174:	28 bb       	out	0x18, r18	; 24
 176:	6f e9       	ldi	r22, 0x9F	; 159
 178:	26 e8       	ldi	r18, 0x86	; 134
 17a:	31 e0       	ldi	r19, 0x01	; 1
 17c:	61 50       	subi	r22, 0x01	; 1
 17e:	20 40       	sbci	r18, 0x00	; 0
 180:	30 40       	sbci	r19, 0x00	; 0
 182:	e1 f7       	brne	.-8      	; 0x17c <main+0xfa>
 184:	00 c0       	rjmp	.+0      	; 0x186 <main+0x104>
 186:	00 00       	nop
	_delay_ms(500);	
}
for(int j=3;j>=0;j--){
	PORTC=0b00000100;
	PORTA=numbers[j];
	for (int i=9;i>=0;i--)
 188:	01 97       	sbiw	r24, 0x01	; 1
 18a:	99 23       	and	r25, r25
 18c:	3c f7       	brge	.-50     	; 0x15c <main+0xda>
	{   	
	PORTC=0b00000010;
	PORTB=numbers[i];
	_delay_ms(500);	
}
for(int j=3;j>=0;j--){
 18e:	41 50       	subi	r20, 0x01	; 1
 190:	51 09       	sbc	r21, r1
 192:	55 23       	and	r21, r21
 194:	b4 f6       	brge	.-84     	; 0x142 <main+0xc0>
 196:	8c cf       	rjmp	.-232    	; 0xb0 <main+0x2e>

00000198 <_exit>:
 198:	f8 94       	cli

0000019a <__stop_program>:
 19a:	ff cf       	rjmp	.-2      	; 0x19a <__stop_program>
